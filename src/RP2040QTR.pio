/* Copyright 2023 Adam Green (https://github.com/adamgreen/)

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

; Use the RP2040's PIO state machines to read the 7 QTR light sensors on the
; 3Ï€+ 2040 robot.
;
; This is a C/C++ port of Pololu's MicroPython code.
.program RP2040QTR
    ; The CPU initializes a few of the registers before this PIO program is restarted.
    ;   OSR = 17 bits of 1s for future shifting out to intialize pindirs and Y.
    ;         This requires 7 + 10  = 17 bits.
    ;   Y = 255 this will result in the loop at 'change' below delaying for ~32usec.
    ;   X = 7 bits of 1s as the last pin state.

    ; OSR already contains 19 bits of 1s put there by the CPU before restarting the state machine.
    ; Set pindirs to 7 bits of 1s to enable output and start charging the capacitor.
    out pindirs, 7

    ; Charge up the capacitors for ~32us.
    ; Y was initialized already by the CPU before restarting the state machine.
charge:
    jmp y-- charge

    ; Use bits still in OSR from previous CPU initialization.
    ; Load 1023 (10 bits of 1s) into Y as a counter
    out y, 10

    ; Set pins back to inputs by writing 0s to pindirs.
    mov osr, null
    out pindirs, 7

    ; Loop is 8 instructions long = 1us
loop:
    ; Read 7 pins into ISR
    in pins, 7

    ; Save Y (current count) in OSR
    mov osr, y

    ; Compare X (last pin state) to ISR (current pin state).
    mov y, isr
    jmp x!=y changed

    ; Discard the pin values from ISR and decrement shift counter.
    mov isr, null
    jmp decrement

    ; One or more pins have changed!
changed:
    ; Save current pin state into X (last pin state).
    mov x, y

    ; Shift another 16 bits of the current counter from OSR into ISR.
    ; With the 7 current pin state bits that are already in the ISR, the auto push threshold of 23 will be hit.
    in osr, 16

decrement:
    ; Restore the current count from the OSR into Y before looping back around.
    mov y, osr
    ; Decrement the counter and loop.
    jmp y-- loop

    ; Y counter has been decremented to -1.
finish:
    ; Send 0xFFFFFFFF to tell the CPU we are done.
    in y, 32

    ; Hang state machine here at end of sampling process.
.wrap_target
    nop
.wrap
